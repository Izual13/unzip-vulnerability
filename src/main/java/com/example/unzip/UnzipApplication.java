package com.example.unzip;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

@SpringBootApplication
public class UnzipApplication {

    public static final String TARGET_FOLDER = "target";

    public static void main(String[] args) {
        SpringApplication.run(UnzipApplication.class, args);
    }

    @RestController
    static class UploadController {

        @PostMapping("/")
        public ResponseEntity handleFileUpload(@RequestParam("file") MultipartFile file) throws IOException {

            byte[] bytes = file.getBytes();
            System.out.println("input bytes: " + bytes.length);

            ByteArrayInputStream byteStream = new ByteArrayInputStream(bytes);
            unzip(new ZipInputStream(byteStream));


            return ResponseEntity.noContent().build();
        }

        @PostMapping("/fs")
        public ResponseEntity handleFileUploadFs(@RequestParam("file") MultipartFile file) throws IOException {

            byte[] bytes = file.getBytes();
            System.out.println("input bytes: " + bytes.length);

            ByteArrayInputStream byteStream = new ByteArrayInputStream(bytes);
            unzipFs(new ZipInputStream(byteStream));


            return ResponseEntity.noContent().build();
        }


    }

    private static void unzip(ZipInputStream zipStream) throws IOException {
        ZipEntry entry;
        while ((entry = zipStream.getNextEntry()) != null) {
            long zipSize = entry.getSize();
            System.out.print("entry name: " + entry.getName() + "; ");
            System.out.println("zip bytes: " + zipSize);

            byte[] bytes = read(zipStream);

            ByteArrayInputStream byteStream = new ByteArrayInputStream(bytes);
            unzip(new ZipInputStream(byteStream));
        }
    }

    private static void unzipFs(ZipInputStream zipStream) throws IOException {
        ZipEntry entry;
        while ((entry = zipStream.getNextEntry()) != null) {
            long zipSize = entry.getSize();

            createDefaultDirectory(TARGET_FOLDER);

            String name = "target" + File.separator + UUID.randomUUID();
            System.out.print("entry name: " + name + "; ");
            System.out.println("zip bytes: " + zipSize);


            File targetFile = new File(name);
            try (OutputStream outStream = new FileOutputStream(targetFile);) {
                int nRead;
                byte[] data = new byte[16384];

                while ((nRead = zipStream.read(data, 0, data.length)) != -1) {
                    outStream.write(data, 0, nRead);
                }

                outStream.flush();
            }

            unzipFs(new ZipInputStream(new FileInputStream(name)));
        }
    }

    private static void createDefaultDirectory(String target) {
        File directory = new File(target);
        if (!directory.exists()) {
            directory.mkdir();
        }
    }

    private static byte[] read(InputStream is) throws IOException {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();

        int nRead;
        byte[] data = new byte[16384];

        while ((nRead = is.read(data, 0, data.length)) != -1) {
            buffer.write(data, 0, nRead);
        }

        buffer.flush();

        return buffer.toByteArray();
    }

}
