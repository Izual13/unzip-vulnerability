package com.example.unzip;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.nio.file.Files;
import java.nio.file.Paths;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.multipart;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@AutoConfigureMockMvc
@SpringBootTest
public class UnzipApplicationTests {

    @Autowired
    private MockMvc mvc;

    @Test
    public void contextLoads() {
    }

    @Test
    public void shouldUploadedFile() throws Exception {
        MockMultipartFile multipartFile = new MockMultipartFile("file", "test.txt",
                "text/plain", "Spring Framework".getBytes());
        this.mvc.perform(multipart("/").file(multipartFile))
                .andExpect(status().isNoContent());

    }

    @Test
    public void shouldZipUploadedFile() throws Exception {
        ClassLoader classLoader = getClass().getClassLoader();
        byte[] data = Files.readAllBytes(Paths.get(classLoader.getResource("0.zip").toURI()));


        MockMultipartFile multipartFile = new MockMultipartFile("file", "test.txt",
                "text/plain", data);
        this.mvc.perform(multipart("/").file(multipartFile))
                .andExpect(status().isNoContent());

    }

}
